[build-system]
requires = ["uv_build >= 0.7.19, <0.9.0"]
build-backend = "uv_build"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

[project]
requires-python = ">=3.12"
name = "injinja"
version = "1.0.1"
description = "Injinja: Injectable Jinja Configuration tool. Insanely configurable... config system."
readme = "README.md"
license = "MIT"
license-files = ["LICEN[CS]E*"]
authors = [
  {name = "Josh Peak", email = "neozenith.dev@gmail.com"},
]
maintainers = [
  {name = "Josh Peak", email = "neozenith.dev@gmail.com"}
]
classifiers = [
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 5 - Production/Stable",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",

  # Specify the Python versions you support here.
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
    "jinja2",
    "PyYAML",
    "deepmerge",
    "types-PyYAML",
    "types-jinja2"
]

[project.urls]
Homepage = "https://github.com/neozenith/injinja"
Documentation = "https://github.com/neozenith/injinja"
Repository = "https://github.com/neozenith/injinja.git"
Issues = "https://github.com/neozenith/injinja/issues"
Changelog = "https://github.com/neozenith/injinja/releases"



[project.scripts]
injinja = "injinja.injinja:main"

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "isort>=5.13.2",
    "md-toc>=9.0.0",
    "mypy>=1.14.1",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.1",
    "ruff>=0.9.2",
    "twine>=6.1.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.26.0",
]


[tool.sqlfmt]
line_length = 120
exclude=["target/**/*", "dbt_packages/**/*", ".venv/**/*", "pytests/**/*"]


[tool.black]
line-length = 120

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "E",# pycodestyle
    "F", # Pyflakes
    "UP", # pyupgrade
    "B", # flake8-bugbear
    "SIM", # flake8-simplify
    # "I", # isort
    "PTH", # falek8-use-pathlib 
    "TCH", # flake8-type-checking
    # "S", # flake8-bandit
    "C90", #mccabe
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 10

[tool.isort]
profile = "black"
multi_line_output = 3
import_heading_stdlib = "Standard Library"
import_heading_firstparty = "Our Libraries"
import_heading_thirdparty = "Third Party"

[tool.coverage.run]
omit = [
    "**/__main__.py"
]

[tool.pytest.ini_options]
minversion = "6.0"

addopts = "-s -vvv --color=yes -n auto --cov-report=html --cov-report=term --cov-report=json --cov=src --cov-branch --cov-fail-under=91"

[tool.mypy]
pretty = true
exclude = [
  'tests/',
  '.venv/',
  'docs/'
]
follow_imports = 'silent'
ignore_missing_imports = true

# Work your way up to these:
strict = true

